# -*- coding: utf-8 -*-
"""stream.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18hNh7eqUpc-RXanguCO6WwtHSaqGQvxG
"""

import streamlit as st
import pandas as pd

def process_chatbot_data(df, include_types=['bot', 'agent', 'user'], start_date=None, end_date=None):

    # Select only the relevant columns (bot.#, agent.#, user.#, created_at.#)
    relevant_columns = [col for col in df.columns if 'bot.' in col or 'agent.' in col or 'user.' in col or 'created_at.' in col]

    # Create a new dataframe with only the relevant columns
    df_relevant = df[relevant_columns]

    # Initialize a new dataframe for the output format
    output_df = pd.DataFrame(columns=['type', 'text', 'time'])

    # Iterate through each row in the relevant dataframe
    for index, row in df_relevant.iterrows():
        for col in range(len(relevant_columns)//4):
            bot_col = f'bot.{col}'
            agent_col = f'agent.{col}'
            user_col = f'user.{col}'
            created_at_col = f'created_at.{col}'

            if 'bot' in include_types and pd.notna(row[bot_col]) and row[bot_col] != '':
                output_df = pd.concat([output_df, pd.DataFrame({'type': ['bot'], 'text': [row[bot_col]], 'time': [row[created_at_col]]})], ignore_index=True)
            elif 'agent' in include_types and pd.notna(row[agent_col]) and row[agent_col] != '':
                output_df = pd.concat([output_df, pd.DataFrame({'type': ['agent'], 'text': [row[agent_col]], 'time': [row[created_at_col]]})], ignore_index=True)
            elif 'user' in include_types and pd.notna(row[user_col]) and row[user_col] != '':
                output_df = pd.concat([output_df, pd.DataFrame({'type': ['user'], 'text': [row[user_col]], 'time': [row[created_at_col]]})], ignore_index=True)

    # Convert 'time' column to datetime format and filter by date range
    output_df['time'] = pd.to_datetime(output_df['time']).dt.date

    if start_date:
        start_date = pd.to_datetime(start_date).date()
        output_df = output_df[output_df['time'] >= start_date]

    if end_date:
        end_date = pd.to_datetime(end_date).date()
        output_df = output_df[output_df['time'] <= end_date]

    # Remove rows where 'time' (created_at) is empty
    output_df = output_df[output_df['time'].notna() & (output_df['time'] != '')]

    return output_df

# Streamlit UI

st.title('Chatbot Conversation Data Processor')

# File uploader
uploaded_file = st.file_uploader("Upload your Excel file", type=['xlsx'])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Checkbox to select types
    st.subheader('Select types to include:')
    include_bot = st.checkbox('bot', value=True)
    include_agent = st.checkbox('agent', value=True)
    include_user = st.checkbox('user', value=True)

    include_types = []
    if include_bot:
        include_types.append('bot')
    if include_agent:
        include_types.append('agent')
    if include_user:
        include_types.append('user')

    # Date range selectors
    st.subheader('Select date range:')
    start_date = st.date_input('Start date', value=pd.to_datetime('2024-07-01').date())
    end_date = st.date_input('End date', value=pd.to_datetime('2024-08-01').date())

    # Process button
    if st.button('Process'):
        processed_data = process_chatbot_data(df, include_types=include_types, start_date=start_date, end_date=end_date)

        # Show preview
        st.subheader('Preview of processed data:')
        st.write(processed_data.head(20))

        # Provide download button
        st.subheader('Download processed data:')
        processed_data.to_excel('processed_conversation_data.xlsx', index=False)
        with open('processed_conversation_data.xlsx', 'rb') as f:
            st.download_button('Download Excel file', f, file_name='processed_conversation_data.xlsx')